/**** desc file generated by MIDIExplorer.

Please adapt this file as follows:

1. Put any general info and comments about the device here.

2. Add some minimal code examples for testing, such as:

k = MKtl('nk2', "korg-nanokontrol2");
k.elementAt(sl, 0).action = { yo.postln; };
k.elementAt(sl, 1).action = { 1.postcs; };

3. When there are only a few elements, one can keep them in a flat dictionary, and give them clear element names; see
'Reference/Naming_conventions_in_element_descriptions'.openHelpFile

4. When many elements of the same type are listed in an obvious order,
   such as 8 sliders sending cc numbers,
   or 88 piano keys sending noteOn and noteOff,
   it makes sense to organize them into Arrays.
'Reference/MKtl_description_files'.openHelpFile

Instructions will be continued when canonical format is been finalized.
More information can be found here:
'Tutorials/How_to_create_a_description_file'.openHelpFile;
'Tutorials/How_to_create_a_description_file_for_MIDI'.openHelpFile;


****/

(
deviceName: "EXP TAIstudio",
protocol: 'midi',
deviceType: '___',
elementTypes: [  ],
status: (
	linux: "unknown",
	osx: "unknown",
	win: "unknown"),

idInfo: "EXP TAIstudio",

// hardwarePages: [1, 2, 3, 4],

deviceInfo: (
	// vendorURI: 'http://company.com/products/this',
	// manualURI: 'http://company.com/products/this/manual.pdf',
	description: "LFSaw selfmade 4x pitchbend",
	features: [],
	notes: "",
	hasScribble: false
),
elementsDesc: (
	 elements: [

		// ------- touch ------------
		( key: 'pd1', 'midiChan': 0, 'midiMsgType': 'bend', 'elementType': 'bender', 'spec': 'midiBend'),
		( key: 'pd2', 'midiChan': 1, 'midiMsgType': 'bend', 'elementType': 'bender', 'spec': 'midiBend'),
		( key: 'kn1', 'midiChan': 2, 'midiMsgType': 'bend', 'elementType': 'bender', 'spec': 'midiBend'),
		( key: 'kn2', 'midiChan': 3, 'midiMsgType': 'bend', 'elementType': 'bender', 'spec': 'midiBend'),
	]
)

);

